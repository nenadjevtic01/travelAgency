// <auto-generated />
using System;
using DiplomskiProjekat.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiplomskiProjekat.DataAccess.Migrations
{
    [DbContext(typeof(DiplomskiProjekatContext))]
    [Migration("20231207163218_updatedDbSet")]
    partial class updatedDbSet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiplomskiProjekat.Domain.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationId"), 1L, 1);

                    b.Property<string>("AccommodationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("AccommodationStars")
                        .HasPrecision(1, 1)
                        .HasColumnType("decimal(1,1)");

                    b.Property<int>("AccommodationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("AccommodationId");

                    b.HasIndex("AccommodationTypeId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AccommodationType", b =>
                {
                    b.Property<int>("AccommodationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationTypeId"), 1L, 1);

                    b.Property<string>("AccommodationTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AccommodationTypeId");

                    b.ToTable("AccommodationsType");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Attraction", b =>
                {
                    b.Property<int>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionId"), 1L, 1);

                    b.Property<int>("AttractionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AttractionDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AttractionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("AttractionId");

                    b.HasIndex("AttractionCategoryId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Attraction");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AttractionCategory", b =>
                {
                    b.Property<int>("AttractionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionCategoryId"), 1L, 1);

                    b.Property<string>("AttractionCategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("AttractionCategoryId");

                    b.ToTable("AttractionCategory");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AttractionImage", b =>
                {
                    b.Property<int>("AttractionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionImageId"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttractionImageId");

                    b.HasIndex("AttractionId");

                    b.ToTable("AttractionImage");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"), 1L, 1);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExecutionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UseCaseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Climate", b =>
                {
                    b.Property<int>("ClimateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClimateId"), 1L, 1);

                    b.Property<string>("ClimateInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.HasKey("ClimateId");

                    b.HasIndex("DestinationId")
                        .IsUnique();

                    b.ToTable("Climate");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Continent", b =>
                {
                    b.Property<int>("ContinentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContinentId"), 1L, 1);

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContinentId");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ContinentId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Population")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TotalArea")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CountryId");

                    b.HasIndex("ContinentId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("DestinationId");

                    b.HasIndex("CountryId");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.DestinationImage", b =>
                {
                    b.Property<int>("DestinationImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationImageId"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinationImageId");

                    b.HasIndex("DestinationId");

                    b.ToTable("DestinationImage");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryId"), 1L, 1);

                    b.Property<string>("ItineraryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ItineraryId");

                    b.ToTable("Itinerary");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.ItineraryActivity", b =>
                {
                    b.Property<int>("ItineraryActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryActivityId"), 1L, 1);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Day")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.HasKey("ItineraryActivityId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("ItineraryActivity");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CheckOutDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.ReservationRoom", b =>
                {
                    b.Property<int>("ReservationRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationRoomId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationRoomId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRoom");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<bool>("AC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<bool>("Balcony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomNumber", b =>
                {
                    b.Property<int>("RoomNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomNumberId"), 1L, 1);

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOf")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoomNumberId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomNumber");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomPrice", b =>
                {
                    b.Property<int>("RoomPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomPriceId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("RoomPriceId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPrice");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Safety", b =>
                {
                    b.Property<int>("SafetyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SafetyId"), 1L, 1);

                    b.Property<string>("Advices")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("SafetyLevel")
                        .HasColumnType("int");

                    b.HasKey("SafetyId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Safety");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportId"), 1L, 1);

                    b.Property<string>("TransportName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TransportId");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"), 1L, 1);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("TransportId")
                        .HasColumnType("int");

                    b.Property<string>("TripDescription")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TripId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("ItineraryId");

                    b.HasIndex("TransportId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripAccommodation", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "AccommodationId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("TripAccommodation");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripAttraction", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "AttractionId");

                    b.HasIndex("AttractionId");

                    b.ToTable("TripAttraction");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripPrice", b =>
                {
                    b.Property<int>("TripPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripPriceId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("TripPriceId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPrice");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UseCase", b =>
                {
                    b.Property<int>("UseCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UseCaseId"), 1L, 1);

                    b.Property<string>("UseCaseDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UseCaseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UseCaseId");

                    b.ToTable("UseCase");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UserFavorites", b =>
                {
                    b.Property<int>("UserFavoritesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFavoritesId"), 1L, 1);

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFavoritesId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavorite");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UserUseCase", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UseCaseId");

                    b.HasIndex("UseCaseId");

                    b.ToTable("UserUseCase");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Visa", b =>
                {
                    b.Property<int>("VisaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VisaId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Visa");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Admin", b =>
                {
                    b.HasBaseType("DiplomskiProjekat.Domain.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AgencyEmployee", b =>
                {
                    b.HasBaseType("DiplomskiProjekat.Domain.User");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Agency employee");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RegularUser", b =>
                {
                    b.HasBaseType("DiplomskiProjekat.Domain.User");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Regular user");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Accommodation", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.AccommodationType", "AccommodationType")
                        .WithMany("Accommodations")
                        .HasForeignKey("AccommodationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithMany("Accommodations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccommodationType");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Attraction", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.AttractionCategory", "AttractionCategory")
                        .WithMany("Attractions")
                        .HasForeignKey("AttractionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithMany("Attractions")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttractionCategory");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AttractionImage", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Attraction", "Attraction")
                        .WithMany("AttractionImages")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attraction");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Climate", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithOne("Climate")
                        .HasForeignKey("DiplomskiProjekat.Domain.Climate", "DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Country", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Destination", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Country", "Country")
                        .WithMany("Destination")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.DestinationImage", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithMany("Images")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.ItineraryActivity", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Itinerary", "Itinerary")
                        .WithMany("ItineraryActivities")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Reservation", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Trip", "Trip")
                        .WithMany("Reservations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.RegularUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.ReservationRoom", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Reservation", "Reservation")
                        .WithMany("Rooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Room", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Accommodation", "Accommodation")
                        .WithMany("Rooms")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.RoomType", "RoomType")
                        .WithMany("AccommodationRooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomNumber", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Accommodation", "Accommodation")
                        .WithMany("RoomsNumber")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.RoomType", "RoomType")
                        .WithMany("AccommodationRoomsNumber")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomPrice", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Room", "Room")
                        .WithMany("Prices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Safety", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Country", "Country")
                        .WithOne("Safety")
                        .HasForeignKey("DiplomskiProjekat.Domain.Safety", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Trip", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Agency", "Agency")
                        .WithMany("Trips")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithMany("Trips")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Itinerary", "Itinerary")
                        .WithMany("Trips")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Transport", "Transport")
                        .WithMany("TripList")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Destination");

                    b.Navigation("Itinerary");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripAccommodation", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Accommodation", "Accommodation")
                        .WithMany("Trips")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Trip", "Trip")
                        .WithMany("Accommodations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripAttraction", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Attraction", "Attraction")
                        .WithMany("Trips")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.Trip", "Trip")
                        .WithMany("Attractions")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.TripPrice", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Trip", "Trip")
                        .WithMany("Prices")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UserFavorites", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Destination", "Destination")
                        .WithMany("UserFavorites")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.RegularUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UserUseCase", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.UseCase", "UseCase")
                        .WithMany("Users")
                        .HasForeignKey("UseCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiplomskiProjekat.Domain.User", "User")
                        .WithMany("UseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UseCase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Visa", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Country", "Country")
                        .WithOne("VisaInfo")
                        .HasForeignKey("DiplomskiProjekat.Domain.Visa", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AgencyEmployee", b =>
                {
                    b.HasOne("DiplomskiProjekat.Domain.Agency", "Agency")
                        .WithMany("Employees")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Accommodation", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("RoomsNumber");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AccommodationType", b =>
                {
                    b.Navigation("Accommodations");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Agency", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Attraction", b =>
                {
                    b.Navigation("AttractionImages");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.AttractionCategory", b =>
                {
                    b.Navigation("Attractions");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Country", b =>
                {
                    b.Navigation("Destination");

                    b.Navigation("Safety")
                        .IsRequired();

                    b.Navigation("VisaInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Destination", b =>
                {
                    b.Navigation("Accommodations");

                    b.Navigation("Attractions");

                    b.Navigation("Climate")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Trips");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Itinerary", b =>
                {
                    b.Navigation("ItineraryActivities");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Reservation", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Room", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RoomType", b =>
                {
                    b.Navigation("AccommodationRooms");

                    b.Navigation("AccommodationRoomsNumber");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Transport", b =>
                {
                    b.Navigation("TripList");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.Trip", b =>
                {
                    b.Navigation("Accommodations");

                    b.Navigation("Attractions");

                    b.Navigation("Prices");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.UseCase", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.User", b =>
                {
                    b.Navigation("UseCases");
                });

            modelBuilder.Entity("DiplomskiProjekat.Domain.RegularUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
